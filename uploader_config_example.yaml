# The python logging level to use
# one of: DEBUG, INFO, WARNING, ERROR, FATAL
loglevel: DEBUG

# The name of the default MyTardis StorageBox to use.
# If in doubt, leave as default.
storage_box_name: default

# The storage mode used for the default StorageBox (eg for fastq.gz and other
# large files)
# Valid options are: upload and shared
#   upload - files are uploaded over HTTP(S)
#   shared - this client machine and the MyTardis server both have a mount to
#            the same shared filesystem (eg NFS or SMB). Just registers the
#            location of files relative to storage_base_path (below), no files
#            are copied and no bulk data upload occurs.
#   staging - not currently supported.
# For more details, see:
# https://mytardis.readthedocs.io/en/develop/dev/api.html?highlight=staging#datafiles
storage_mode: upload

# The name of the MyTardis StorageBox where 'live' files that need to be
# served immediately in response to a page view (eg small HTML report files
# from FastQC) will be uploaded.
# An S3-style object store is a often a good option.
# These files should never be migrated to tape.
live_storage_box_name: default
# live_storage_box_name: object_store

# This is the 'location' used by the MyTardis StorageBox when running in 'shared' mode
storage_base_path: /data/instrument

# The path to the directory with data to be uploaded/registerd with MyTardis
# Usually specified on the command line with --path
# path: /data/instrument/some_unique_expt_id_001/

# The path to bcl2fastq output. Uses the Python str.format method with named
# parameters, where {run_path} is the base path of the run (eg --path config
# option above) and {run_id} is the unique ID of the run
# (eg 130613_DMO177_0029_AH0EPTADXX or in the example above,
# some_unique_expt_id_001). Don't forget the double quotes !
bcl2fastq_output_path: "{run_path}/{run_id}.bcl2fastq"

# A list of groups (by name) that will be given ownership of ingested
# experiments. Typically this contains the facility manager group.
experiment_owner_groups:
  - mhtp-facility-managers
  - somegreatgroup

# If True, we only ingest the FASTQ files ignoring any metadata extraction
# from instrument config and logs. FastQC reports will still be generated if
# run_fastqc is True.
fastq_only: False

# illumina_uploader.py currently doesn't use this option
# A list of Python regular expressions matching files to exclude
# matches against the absolute path. 'Hidden' files beginning
# with a period (.) are excluded by default.
# Don't use quotes, and expressions are comma delimited without
# regard to escaping so you can't use commas :/
#exclude:
#  - '/FastQC\.done$'
#  - '/FastQC\.inprogress$'
#  - '/LIST$'
#  - '/Temp$'
#  - '/Temp/.*'
#  - 'SampleSheet.csv'
#  - '/Basecall_Stats_\w+$'
#  - '/Basecall_Stats_\w+/.*'

# The username of the MyTardis user that will ingest the data
username: powerfuladmin

# The API key (tastypie) for this username, provided by the MyTardis server.
# Keep it secret, but use this in preference to a password.
api_key: ub3rsecre7zsuperSecre7zkeepadaSecre7z

# The login password for the username - avoid using this in production, use
# api_key instead. Don't make this config file world readable !
# password: ub3rsecre7z!

# The address of the MyTardis server, including :port
url: http://localhost:8000
# url: http://mytardis-server.edu.au:8000
# url: https://secure.mytardis-server.edu.au

# The path to the certificate of the server when using SSL/TLS, to
# allow it's identity to be verified. You should set this if your MyTardis
# server are uses a self-signed certificate.
# If you are using a self-signed certificate and the 'certificate' setting
# isn't set, you may set this value to INSECURE (all-caps) to acknowledge that
# you are happy to connect to a server of unverified identity (with the
# possibility of MITM attacks). Using INSECURE is strongly discouraged, but
# useful for testing.
# certificate: /etc/ssl/certs/ssl-cert-snakeoil.pem
# certificate: INSECURE
# An empty or missing value default to always verify
# certificate:

# Should we run FastQC on reads before uploading if expected output directory
# doesn't exist ?
run_fastqc: True

# The number of threads to use for some paralell processes usually this would
# be close to the number of cores on the machine
threads: 4

# The path to the FastQC executable
fastqc_bin: /usr/bin/fastqc

# Specifies whether the ingestor should automatically move any existing run
# on the server to 'trash' if it matches the unique run ID of the current run
# This is useful when a run was demultiplexed incorrectly
# (eg errors in SampleSheet.csv) and needs to be ingested again, without
# cluttering the web interface with multiple versions of the same run
replace_duplicate_runs: False
